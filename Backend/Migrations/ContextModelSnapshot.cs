// <auto-generated />
using Backend.DataAccessLayer.Concrete;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Backend.EntityLayer.Concrete.Ability", b =>
                {
                    b.Property<int>("AbilityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AbilityID"));

                    b.Property<string>("AbilityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AbilityID");

                    b.ToTable("Abilities");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.Armor", b =>
                {
                    b.Property<int>("ItemID")
                        .HasColumnType("integer");

                    b.Property<int>("ArmorTypeID")
                        .HasColumnType("integer");

                    b.Property<int>("Defense")
                        .HasColumnType("integer");

                    b.Property<int?>("ProficiencyID")
                        .HasColumnType("integer");

                    b.HasKey("ItemID");

                    b.HasIndex("ArmorTypeID");

                    b.HasIndex("ProficiencyID");

                    b.ToTable("Armors");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.ArmorType", b =>
                {
                    b.Property<int>("ArmorTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ArmorTypeID"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ArmorTypeID");

                    b.ToTable("ArmorTypes");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.BonusAction", b =>
                {
                    b.Property<int>("BonusActionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BonusActionID"));

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("CharacterID")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("SpellID")
                        .HasColumnType("integer");

                    b.HasKey("BonusActionID");

                    b.HasIndex("CharacterID");

                    b.HasIndex("SpellID");

                    b.ToTable("BonusActions");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.Character", b =>
                {
                    b.Property<int>("CharacterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CharacterID"));

                    b.Property<int>("ArmorClass")
                        .HasColumnType("integer");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<int>("InventoryID")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsMOB")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsNPC")
                        .HasColumnType("boolean");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.Property<int>("XP")
                        .HasColumnType("integer");

                    b.HasKey("CharacterID");

                    b.HasIndex("ClassID");

                    b.HasIndex("UserID");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.CharacterAbility", b =>
                {
                    b.Property<int>("CharacterAbilityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CharacterAbilityID"));

                    b.Property<int>("AbilityID")
                        .HasColumnType("integer");

                    b.Property<int>("CharacterID")
                        .HasColumnType("integer");

                    b.HasKey("CharacterAbilityID");

                    b.HasIndex("AbilityID");

                    b.HasIndex("CharacterID");

                    b.ToTable("CharacterAbilities");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.CharacterCondition", b =>
                {
                    b.Property<int>("CharacterConditionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CharacterConditionID"));

                    b.Property<int>("CharacterID")
                        .HasColumnType("integer");

                    b.Property<int>("ConditionID")
                        .HasColumnType("integer");

                    b.HasKey("CharacterConditionID");

                    b.HasIndex("CharacterID");

                    b.HasIndex("ConditionID");

                    b.ToTable("CharacterCondition");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.CharacterFeature", b =>
                {
                    b.Property<int>("CharacterFeatureID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CharacterFeatureID"));

                    b.Property<int>("CharacterID")
                        .HasColumnType("integer");

                    b.Property<int>("FeatureID")
                        .HasColumnType("integer");

                    b.HasKey("CharacterFeatureID");

                    b.HasIndex("CharacterID");

                    b.HasIndex("FeatureID");

                    b.ToTable("CharacterFeatures");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.CharacterProficiency", b =>
                {
                    b.Property<int>("CharacterProficiencyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CharacterProficiencyID"));

                    b.Property<int>("CharacterID")
                        .HasColumnType("integer");

                    b.Property<int>("ProficiencyID")
                        .HasColumnType("integer");

                    b.HasKey("CharacterProficiencyID");

                    b.HasIndex("CharacterID");

                    b.HasIndex("ProficiencyID");

                    b.ToTable("CharacterProficiencies");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.CharacterSense", b =>
                {
                    b.Property<int>("CharacterSensesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CharacterSensesID"));

                    b.Property<int>("CharacterID")
                        .HasColumnType("integer");

                    b.Property<int>("SenseID")
                        .HasColumnType("integer");

                    b.HasKey("CharacterSensesID");

                    b.HasIndex("CharacterID");

                    b.HasIndex("SenseID");

                    b.ToTable("CharacterSenses");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.CharacterSkill", b =>
                {
                    b.Property<int>("CharacterSkillID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CharacterSkillID"));

                    b.Property<int>("CharacterID")
                        .HasColumnType("integer");

                    b.Property<int>("SkillID")
                        .HasColumnType("integer");

                    b.HasKey("CharacterSkillID");

                    b.HasIndex("CharacterID");

                    b.HasIndex("SkillID");

                    b.ToTable("CharacterSkills");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.CharacterSpell", b =>
                {
                    b.Property<int>("CharacterSpellID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CharacterSpellID"));

                    b.Property<int>("CharacterID")
                        .HasColumnType("integer");

                    b.Property<int>("SpellID")
                        .HasColumnType("integer");

                    b.HasKey("CharacterSpellID");

                    b.HasIndex("CharacterID");

                    b.HasIndex("SpellID");

                    b.ToTable("CharacterSpells");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.CharacterThrow", b =>
                {
                    b.Property<int>("CharacterThrowID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CharacterThrowID"));

                    b.Property<int>("CharacterID")
                        .HasColumnType("integer");

                    b.Property<int>("ThrowID")
                        .HasColumnType("integer");

                    b.HasKey("CharacterThrowID");

                    b.HasIndex("CharacterID");

                    b.HasIndex("ThrowID");

                    b.ToTable("CharacterThrows");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.Class", b =>
                {
                    b.Property<int>("ClassID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClassID"));

                    b.Property<string>("HitDice")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProficiencyID")
                        .HasColumnType("integer");

                    b.Property<int>("Speed")
                        .HasColumnType("integer");

                    b.HasKey("ClassID");

                    b.HasIndex("ProficiencyID");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.Component", b =>
                {
                    b.Property<int>("ComponentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ComponentID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ComponentID");

                    b.ToTable("Components");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.Condition", b =>
                {
                    b.Property<int>("ConditionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ConditionID"));

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ConditionID");

                    b.ToTable("Conditions");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.DamageType", b =>
                {
                    b.Property<int>("DamageTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DamageTypeID"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DamageTypeID");

                    b.ToTable("DamageTypes");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.Feature", b =>
                {
                    b.Property<int>("FeatureID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FeatureID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("FeatureID");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.Inventory", b =>
                {
                    b.Property<int>("InventoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InventoryID"));

                    b.Property<int>("CharacterID")
                        .HasColumnType("integer");

                    b.HasKey("InventoryID");

                    b.HasIndex("CharacterID")
                        .IsUnique();

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.InventoryItem", b =>
                {
                    b.Property<int>("InventoryItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InventoryItemID"));

                    b.Property<int>("InventoryID")
                        .HasColumnType("integer");

                    b.Property<int>("ItemID")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("InventoryItemID");

                    b.HasIndex("InventoryID");

                    b.HasIndex("ItemID");

                    b.ToTable("InventoryItems");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.Item", b =>
                {
                    b.Property<int>("ItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ItemID"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("GP")
                        .HasColumnType("integer");

                    b.Property<int>("ItemTypeID")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ItemID");

                    b.HasIndex("ItemTypeID");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.ItemType", b =>
                {
                    b.Property<int>("ItemTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ItemTypeID"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ItemTypeID");

                    b.ToTable("ItemTypes");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.Language", b =>
                {
                    b.Property<int>("LanguageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LanguageID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ProficiencyID")
                        .HasColumnType("integer");

                    b.HasKey("LanguageID");

                    b.HasIndex("ProficiencyID");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.Misc", b =>
                {
                    b.Property<int>("ItemID")
                        .HasColumnType("integer");

                    b.HasKey("ItemID");

                    b.ToTable("Miscellaneous");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.Proficiency", b =>
                {
                    b.Property<int>("ProficiencyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProficiencyID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProficiencyID");

                    b.ToTable("Proficiencies");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.Sense", b =>
                {
                    b.Property<int>("SenseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SenseID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("SenseID");

                    b.ToTable("Senses");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.Skill", b =>
                {
                    b.Property<int>("SkillID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SkillID"));

                    b.Property<int>("AbilityID")
                        .HasColumnType("integer");

                    b.Property<string>("AbilityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Bonus")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SkillID");

                    b.HasIndex("AbilityID");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.Spell", b =>
                {
                    b.Property<int>("SpellID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SpellID"));

                    b.Property<string>("CastingTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Damage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DamageTypeID")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<string>("HitDice")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Range")
                        .HasColumnType("integer");

                    b.Property<string>("School")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isCantrip")
                        .HasColumnType("boolean");

                    b.HasKey("SpellID");

                    b.HasIndex("DamageTypeID");

                    b.ToTable("Spells");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.SpellComponent", b =>
                {
                    b.Property<int>("SpellComponentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SpellComponentID"));

                    b.Property<int>("ComponentID")
                        .HasColumnType("integer");

                    b.Property<int>("SpellID")
                        .HasColumnType("integer");

                    b.HasKey("SpellComponentID");

                    b.HasIndex("ComponentID");

                    b.HasIndex("SpellID");

                    b.ToTable("SpellComponents");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.Throw", b =>
                {
                    b.Property<int>("ThrowID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ThrowID"));

                    b.Property<string>("Modifier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("ThrowID");

                    b.ToTable("Throws");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.Tool", b =>
                {
                    b.Property<int>("ToolID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ToolID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ProficiencyID")
                        .HasColumnType("integer");

                    b.HasKey("ToolID");

                    b.HasIndex("ProficiencyID");

                    b.ToTable("Tools");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserID"));

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("HashedPassword")
                        .HasColumnType("text");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.Weapon", b =>
                {
                    b.Property<int>("ItemID")
                        .HasColumnType("integer");

                    b.Property<int>("Damage")
                        .HasColumnType("integer");

                    b.Property<int>("DamageTypeID")
                        .HasColumnType("integer");

                    b.Property<int?>("ProficiencyID")
                        .HasColumnType("integer");

                    b.Property<int>("Range")
                        .HasColumnType("integer");

                    b.Property<int>("WeaponTypeID")
                        .HasColumnType("integer");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("ItemID");

                    b.HasIndex("DamageTypeID");

                    b.HasIndex("ProficiencyID");

                    b.HasIndex("WeaponTypeID");

                    b.ToTable("Weapons");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.WeaponType", b =>
                {
                    b.Property<int>("WeaponTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WeaponTypeID"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("WeaponTypeID");

                    b.ToTable("WeaponTypes");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.Armor", b =>
                {
                    b.HasOne("Backend.EntityLayer.Concrete.ArmorType", "ArmorType")
                        .WithMany()
                        .HasForeignKey("ArmorTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.EntityLayer.Concrete.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.EntityLayer.Concrete.Proficiency", null)
                        .WithMany("Armors")
                        .HasForeignKey("ProficiencyID");

                    b.Navigation("ArmorType");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.BonusAction", b =>
                {
                    b.HasOne("Backend.EntityLayer.Concrete.Character", null)
                        .WithMany("BonusActions")
                        .HasForeignKey("CharacterID");

                    b.HasOne("Backend.EntityLayer.Concrete.Spell", "Spell")
                        .WithMany()
                        .HasForeignKey("SpellID");

                    b.Navigation("Spell");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.Character", b =>
                {
                    b.HasOne("Backend.EntityLayer.Concrete.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.EntityLayer.Concrete.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.CharacterAbility", b =>
                {
                    b.HasOne("Backend.EntityLayer.Concrete.Ability", "Ability")
                        .WithMany()
                        .HasForeignKey("AbilityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.EntityLayer.Concrete.Character", "Character")
                        .WithMany("Abilities")
                        .HasForeignKey("CharacterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ability");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.CharacterCondition", b =>
                {
                    b.HasOne("Backend.EntityLayer.Concrete.Character", "Character")
                        .WithMany("Conditions")
                        .HasForeignKey("CharacterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.EntityLayer.Concrete.Condition", "Condition")
                        .WithMany()
                        .HasForeignKey("ConditionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Condition");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.CharacterFeature", b =>
                {
                    b.HasOne("Backend.EntityLayer.Concrete.Character", "Character")
                        .WithMany("Features")
                        .HasForeignKey("CharacterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.EntityLayer.Concrete.Feature", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Feature");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.CharacterProficiency", b =>
                {
                    b.HasOne("Backend.EntityLayer.Concrete.Character", "Character")
                        .WithMany("Proficiencies")
                        .HasForeignKey("CharacterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.EntityLayer.Concrete.Proficiency", "Proficiency")
                        .WithMany()
                        .HasForeignKey("ProficiencyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Proficiency");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.CharacterSense", b =>
                {
                    b.HasOne("Backend.EntityLayer.Concrete.Character", "Character")
                        .WithMany("Senses")
                        .HasForeignKey("CharacterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.EntityLayer.Concrete.Sense", "Sense")
                        .WithMany()
                        .HasForeignKey("SenseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Sense");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.CharacterSkill", b =>
                {
                    b.HasOne("Backend.EntityLayer.Concrete.Character", "Character")
                        .WithMany("Skills")
                        .HasForeignKey("CharacterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.EntityLayer.Concrete.Skill", "Skill")
                        .WithMany("CharacterSkills")
                        .HasForeignKey("SkillID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.CharacterSpell", b =>
                {
                    b.HasOne("Backend.EntityLayer.Concrete.Character", "Character")
                        .WithMany("Spells")
                        .HasForeignKey("CharacterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.EntityLayer.Concrete.Spell", "Spell")
                        .WithMany()
                        .HasForeignKey("SpellID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Spell");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.CharacterThrow", b =>
                {
                    b.HasOne("Backend.EntityLayer.Concrete.Character", "Character")
                        .WithMany("Throws")
                        .HasForeignKey("CharacterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.EntityLayer.Concrete.Throw", "Throw")
                        .WithMany()
                        .HasForeignKey("ThrowID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Throw");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.Class", b =>
                {
                    b.HasOne("Backend.EntityLayer.Concrete.Proficiency", "Proficiency")
                        .WithMany("Classes")
                        .HasForeignKey("ProficiencyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proficiency");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.Inventory", b =>
                {
                    b.HasOne("Backend.EntityLayer.Concrete.Character", "Character")
                        .WithOne("Inventory")
                        .HasForeignKey("Backend.EntityLayer.Concrete.Inventory", "CharacterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.InventoryItem", b =>
                {
                    b.HasOne("Backend.EntityLayer.Concrete.Inventory", "Inventory")
                        .WithMany("InventoryItems")
                        .HasForeignKey("InventoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.EntityLayer.Concrete.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.Item", b =>
                {
                    b.HasOne("Backend.EntityLayer.Concrete.ItemType", "ItemType")
                        .WithMany()
                        .HasForeignKey("ItemTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemType");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.Language", b =>
                {
                    b.HasOne("Backend.EntityLayer.Concrete.Proficiency", null)
                        .WithMany("Languages")
                        .HasForeignKey("ProficiencyID");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.Misc", b =>
                {
                    b.HasOne("Backend.EntityLayer.Concrete.Item", "Item")
                        .WithOne("Misc")
                        .HasForeignKey("Backend.EntityLayer.Concrete.Misc", "ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.Skill", b =>
                {
                    b.HasOne("Backend.EntityLayer.Concrete.Ability", "Ability")
                        .WithMany()
                        .HasForeignKey("AbilityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ability");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.Spell", b =>
                {
                    b.HasOne("Backend.EntityLayer.Concrete.DamageType", "DamageType")
                        .WithMany()
                        .HasForeignKey("DamageTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DamageType");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.SpellComponent", b =>
                {
                    b.HasOne("Backend.EntityLayer.Concrete.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.EntityLayer.Concrete.Spell", "Spell")
                        .WithMany("Components")
                        .HasForeignKey("SpellID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Component");

                    b.Navigation("Spell");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.Tool", b =>
                {
                    b.HasOne("Backend.EntityLayer.Concrete.Proficiency", null)
                        .WithMany("Tools")
                        .HasForeignKey("ProficiencyID");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.Weapon", b =>
                {
                    b.HasOne("Backend.EntityLayer.Concrete.DamageType", "DamageType")
                        .WithMany()
                        .HasForeignKey("DamageTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.EntityLayer.Concrete.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.EntityLayer.Concrete.Proficiency", null)
                        .WithMany("Weapons")
                        .HasForeignKey("ProficiencyID");

                    b.HasOne("Backend.EntityLayer.Concrete.WeaponType", "WeaponType")
                        .WithMany()
                        .HasForeignKey("WeaponTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DamageType");

                    b.Navigation("Item");

                    b.Navigation("WeaponType");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.Character", b =>
                {
                    b.Navigation("Abilities");

                    b.Navigation("BonusActions");

                    b.Navigation("Conditions");

                    b.Navigation("Features");

                    b.Navigation("Inventory");

                    b.Navigation("Proficiencies");

                    b.Navigation("Senses");

                    b.Navigation("Skills");

                    b.Navigation("Spells");

                    b.Navigation("Throws");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.Inventory", b =>
                {
                    b.Navigation("InventoryItems");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.Item", b =>
                {
                    b.Navigation("Misc")
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.Proficiency", b =>
                {
                    b.Navigation("Armors");

                    b.Navigation("Classes");

                    b.Navigation("Languages");

                    b.Navigation("Tools");

                    b.Navigation("Weapons");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.Skill", b =>
                {
                    b.Navigation("CharacterSkills");
                });

            modelBuilder.Entity("Backend.EntityLayer.Concrete.Spell", b =>
                {
                    b.Navigation("Components");
                });
#pragma warning restore 612, 618
        }
    }
}
